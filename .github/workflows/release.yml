name: Release
on:
  release:
    types: [published]
jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: ['8']
    env:
      GIT_USER_NAME: puneetbehl
      GIT_USER_EMAIL: behlp@objectcomputing.com
      GRADLE_OPTS: -Xmx1500m -Dfile.encoding=UTF-8
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Extract Target Branch
        id: extract_branch
        run: |
          echo "Determining Target Branch"
          TARGET_BRANCH=`cat $GITHUB_EVENT_PATH | jq '.release.target_commitish' | sed -e 's/^"\(.*\)"$/\1/g'`
          echo $TARGET_BRANCH
          echo ::set-output name=value::${TARGET_BRANCH}
      - name: Set the current release version
        id: release_version
        run: echo ::set-output name=release_version::${GITHUB_REF:11}
      - name: Run pre-release
        uses: ./.github/actions/pre-release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to Sonatype OSSRH
        if: success()
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SECRING_FILE: ${{ secrets.SECRING_FILE }}
        run: |
          echo $SECRING_FILE | base64 -d > secring.gpg
          echo "Publishing Artifacts"
          (set -x; ./gradlew -Psigning.secretKeyRingFile="${GITHUB_WORKSPACE}/secring.gpg" uploadArchives --no-daemon)
          (set -x; ./gradlew assemble -Psigning.secretKeyRingFile="${GITHUB_WORKSPACE}/secring.gpg" --no-daemon)
      - name: Close And Release Sonatype Staging Repository
        if: success()
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}
        run: |
          ./gradlew closeAndReleaseRepository --no-daemon
      - name: Export Gradle Properties
        uses: micronaut-projects/github-actions/export-gradle-properties@master
      - name: Run post-release
        if: success()
        uses: ./.github/actions/post-release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          SNAPSHOT_SUFFIX: .BUILD-SNAPSHOT
      - name: Upload artifacts to the Github release
        uses: Roang-zero1/github-upload-release-artifacts-action@master
        with:
          args: build/distributions/grails-${{ steps.release_version.outputs.release_version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Message for the Grails Documentation Release
        if: success()
        id: grails_docs_release_message
        run: |
          echo ::set-output name=value::{\"grails_version\":\"$RELEASE_VERSION\"}
        env:
          RELEASE_VERSION: ${{ steps.release_version.outputs.release_version }}
      - name: Invoke grails-doc release workflow
        if: success()
        id: grails_doc
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Release
          repo: grails/grails-doc
          ref: ${{ steps.extract_branch.outputs.value }}
          token: ${{ secrets.GH_TOKEN }}
          inputs: ${{ steps.grails_docs_release_message.outputs.value }}
      - name: Invoke grails-static-website release workflow
        if: success()
        id: grails_static_website
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Release
          repo: grails/grails-static-website
          ref: master
          token: ${{ secrets.GH_TOKEN }}
          inputs: ${{ steps.grails_docs_release_message.outputs.value }}
      - name: Grails SDK Release
        if: success()
        run: |
          if $MINOR ; then
            (set -x; ./gradlew sdkMinorRelease)
          else
            ( set -x; ./gradlew sdkMajorRelease)
          fi
        env:
          MINOR: ${{ startsWith(steps.release_version.outputs.release_version, '3.3') || startsWith(steps.release_version.outputs.release_version, '4.1.') || contains(steps.release_version.outputs.release_version, 'M') || contains(steps.release_version.outputs.release_version, 'RC') }}
          GVM_SDKVENDOR_KEY: ${{ secrets.GVM_SDKVENDOR_KEY }}
          GVM_SDKVENDOR_TOKEN: ${{ secrets.GVM_SDKVENDOR_TOKEN }}
      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
