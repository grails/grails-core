name: "Retry Release"
on:
  workflow_dispatch:
    inputs:
      release:
        description: The Grails Release (e.g. 5.0.3)
        required: true
      target_branch:
        description: The Target Branch (e.g. 5.0.x)
        required: true
permissions: {}
jobs:
  release:
    permissions:
      contents: write  #  to create release
      issues: read  #  to get closed issues
    runs-on: ubuntu-latest
    env:
      GIT_USER_NAME: 'grails-build'
      GIT_USER_EMAIL: 'grails-build@users.noreply.github.com'
    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4
        with:
          ref: "v${{ github.event.inputs.release }}"
          token: ${{ secrets.GH_TOKEN }}
      - name: "‚òïÔ∏è Setup JDK"
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4
        with:
          distribution: liberica
          java-version: 17
      - name: "üêò Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          develocity-access-key: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      - name: "üìù Store the target branch"
        id: extract_branch
        run: |
          echo $TARGET_BRANCH
          echo "value=${TARGET_BRANCH}" >> $GITHUB_OUTPUT
        env:
          TARGET_BRANCH: ${{ github.event.inputs.target_branch }}
      - name: "üìù Store the current release version"
        id: release_version
        run: echo "release_version=${VERSION}" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ github.event.inputs.release }}
      - name: "üß© Run Assemble"
        id: assemble
        env:
          DEVELOCITY_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          DEVELOCITY_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
        run: ./gradlew assemble
      - name: "üì§ Upload artifacts to the Github release"
        id: upload_artifact
        if: steps.assemble.outcome == 'success'
        uses: Roang-zero1/github-upload-release-artifacts-action@c15e0b65ce2ae1c8d52bfbc75d017d21e1da77d7 # v3.0.0 (Use commit sha as this is a 3rd party action)
        with:
          created_tag: v${{ github.event.inputs.release }}
          args: build/distributions/grails-${{ steps.release_version.outputs.release_version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "üìù Create Message for the Grails Documentation Release"
        if: steps.assemble.outcome == 'success'
        id: grails_docs_release_message
        run: |
          echo "value::{\"grails_version\":\"$RELEASE_VERSION\"}" >> $GITHUB_OUTPUT
        env:
          RELEASE_VERSION: ${{ steps.release_version.outputs.release_version }}
      - name: "üì° Invoke grails-doc release workflow"
        if: steps.assemble.outcome == 'success'
        id: grails_doc
        uses: benc-uk/workflow-dispatch@e2e5e9a103e331dad343f381a29e654aea3cf8fc # v1.2.4 (Use commit sha as this is a 3rd party action)
        with:
          workflow: Release
          repo: grails/grails-doc
          ref: ${{ steps.extract_branch.outputs.value }}
          token: ${{ secrets.GH_TOKEN }}
          inputs: ${{ steps.grails_docs_release_message.outputs.value }}
      - name: "üì° Invoke grails-static-website release workflow"
        if: steps.assemble.outcome == 'success'
        id: grails_static_website
        uses: benc-uk/workflow-dispatch@e2e5e9a103e331dad343f381a29e654aea3cf8fc # v1.2.4 (Use commit sha as this is a 3rd party action)
        with:
          workflow: Release
          repo: grails/grails-static-website
          ref: master
          token: ${{ secrets.GH_TOKEN }}
          inputs: ${{ steps.grails_docs_release_message.outputs.value }}
      - name: "‚öôÔ∏è Run post-release"
        if: steps.assemble.outcome == 'success'
        uses: ./.github/actions/post-release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          TARGET_BRANCH: ${{ github.event.inputs.target_branch }}
          RELEASE_VERSION: ${{ github.event.inputs.release }}