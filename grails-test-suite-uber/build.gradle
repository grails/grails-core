configurations.testCompileClasspath {
    exclude module: 'grails-plugin-testing'
}

dependencies {

    api project(':grails-test-suite-base'),
        project(':grails-plugin-interceptors'),
        project(':grails-plugin-controllers')

    api "org.apache.tomcat:tomcat-jdbc"

    testRuntimeOnly "com.h2database:h2"
    testRuntimeOnly "org.springframework:spring-aspects"
    testRuntimeOnly "org.aspectj:aspectjrt", "org.aspectj:aspectjweaver"

    testImplementation project(':grails-plugin-codecs'),
                project(':grails-plugin-domain-class') ,
                project(':grails-plugin-url-mappings') ,
                project(":grails-plugin-datasource"),
                project(":grails-plugin-services"),
                project(":grails-plugin-rest"),
                project(":grails-plugin-i18n"),
                project(":grails-plugin-databinding"),
                project(':grails-spring')

    testImplementation "org.grails:grails-datastore-gorm-hibernate5"
    testImplementation "org.grails.plugins:async"
    testImplementation "org.grails.plugins:gsp"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.grails:grails-web-testing-support"

    testImplementation "com.fasterxml.jackson.core:jackson-databind"
}

def isolatedTestPatterns = [
    isolatedTestsOne: [
        'org.grails.core.DefaultGrailsControllerClassSpec',
        'org.grails.web.util.WebUtilsTests'
    ],
    isolatedTestsTwo: [
        'grails.test.mixin.UrlMappingsTestMixinTests',
        'grails.test.mixin.SetupTeardownInvokeTests',
        'grails.test.mixin.TestMixinSetupTeardownInvokeTests'
    ],
    isolatedRestRendererTests: [
        '*.rest.render.*Spec'
    ],
    isolatedPersonTests: [
        'org.grails.validation.TestingValidationSpec',
        'org.grails.validation.CascadingErrorCountSpec'
    ],
    isolatedRestfulControllerTests: [
        'grails.test.mixin.RestfulControllerSpec',
        'grails.test.mixin.ResourceAnnotationRestfulControllerSpec'
    ]
]

tasks.withType(Test).configureEach {
    maxParallelForks = isCiBuild ? 2 : 4
    forkEvery = isCiBuild ? 25 : 100
    if(!isCiBuild) {
        maxHeapSize = '1024m'
    }
}

tasks.named('test', Test) {
    filter.excludePatterns = isolatedTestPatterns.values().flatten()
    dependsOn(provider {
        tasks.findAll({
            isolatedTestPatterns.containsKey(it.name)
        })
    })
}

isolatedTestPatterns.keySet().each { taskName ->
    tasks.register(taskName, Test) {
        group = 'verification'
        filter.includePatterns = isolatedTestPatterns[taskName]
    }
}

tasks.named('isolatedTestsTwo', Test) {
    maxParallelForks = 1
    forkEvery = 100
}