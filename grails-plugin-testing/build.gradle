dependencies {

    provided project(':grails-plugin-url-mappings'),
             project(':grails-plugin-databinding'),
             project(':grails-plugin-controllers'),
             project(':grails-plugin-domain-class'),
             project(':grails-plugin-gsp'),
             project(':grails-plugin-interceptors'),
             project(':grails-plugin-mimetypes'),
             project(':grails-plugin-converters'),
             project(':grails-plugin-rest'),
             project(':grails-plugin-codecs')

    compile ( project(':grails-test') ) {
        exclude group: 'org.grails', module:'grails-web'
        exclude group: 'org.grails', module:'grails-plugin-mimetypes'
    }
    compile ( project(':grails-logging') ) {
        exclude group: 'org.grails', module:'grails-web'
    }
    compile ( project(':grails-async') )

    compile("org.springframework:spring-test:${springVersion}") {
        exclude group: 'commons-logging', module:'commons-logging'
    }
    compile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    compile("org.spockframework:spock-spring:${spockVersion}") {
        transitive = false
        exclude group:'junit', module: 'junit-dep'
        exclude group:'org.codehaus.groovy', module: 'groovy-all'
    }
    compile("org.spockframework:spock-core:${spockVersion}") {
        transitive = false
        exclude group:'junit', module: 'junit-dep'
        exclude group:'org.codehaus.groovy', module: 'groovy-all'
    }
    compile "junit:junit:${junitVersion}", {
        exclude group:'org.hamcrest', module: 'hamcrest-core'
    }

    runtime "cglib:cglib:${cglibVersion}"

    provided "org.apache.ant:ant:${antVersion}"
}

eclipse {
    classpath {
       file {
           whenMerged { classpath ->
                // greclipse doesn't support ASTs and tests in same project, exclude those tests
                classpath.entries.find { entry -> entry.kind == 'src' && entry.path == "src/test/groovy" }?.excludes=["grails/test/mixin/MetaClassCleanupSpec.groovy"]
           }
       }
    }
}
