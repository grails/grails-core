buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://repo1.maven.org/maven2/" }
    }
    dependencies {
        classpath "commons-io:commons-io:2.2"
        classpath "com.netflix.nebula:gradle-extra-configurations-plugin:2.2.0"
    }
}

apply plugin: 'idea'

ext {
    grailsVersion = '2.5.7.BUILD-SNAPSHOT'
    isBuildSnapshot = grailsVersion.endsWith(".BUILD-SNAPSHOT")
    isTravisBuild = System.getenv().get("TRAVIS") == 'true'

    antTraxVersion = "1.7.1"
    antVersion = "1.9.4"
    aspectjVersion = "1.8.7"  // use same version as org.springframework:spring-aspects uses
    commonsCliVersion = "1.2"
    commonsCollectionsVersion = "3.2.2"
    commonsIOVersion = "2.5"
    commonsLangVersion = "2.6"
    datastoreVersion = "3.1.5.RELEASE"
    gantVersion = "1.9.6"
    gdocEngineVersion = "1.0.1"
    groovyVersion = System.getenv('CI_GROOVY_VERSION') ?: "2.4.10"
    ivyVersion = "2.3.0"
    jansiVersion = "1.11"
    jlineVersion = "2.12"
    jnaVersion = "4.0.0"
    slf4jVersion = "1.7.21"

    spockVersion = '1.0-groovy-2.4'
    springLoadedVersion = "1.2.7.RELEASE"
    springLoadedCommonOptions = "-Xverify:none -Dspringloaded.synchronize=true -Djdk.reflect.allowGetCallerClass=true"
    springVersion = "4.1.9.RELEASE" // ensure to sync "aspectjVersion" (see commend above)
    ehcacheVersion = "2.4.6"
    junitVersion = "4.12"
    concurrentlinkedhashmapVersion = "1.4"
    cglibVersion = "2.2.2"
    objenesisVersion = "1.4"
    servletApiVersion = "3.0.1"

    isJava8Compatible = org.gradle.api.JavaVersion.current().isJava8Compatible()
}

version = grailsVersion

// directories created during the build which are related
// to turning the workspace root into a GRAILS_HOME
ext {
    distInstallDir = file("$buildDir/dist-tmp")
    homeDistDir = file("dist")
    homeBinDir = file("bin")
    homeConfDir = file("conf")
    homeLibDir = file("lib")
    homeSrcDir = file("src")
}

// Groovy is added as a dependency to both the 'groovy' and 'compile'
// configurations, so place the dependency in a shared variable. The
// 'compile' is required so that Groovy appears as a dependency in the
// artifacts' POMs.
ext.jointBuildGroovyJarProperty = System.getProperty('groovy.jar')
ext.groovyDependency = null
if (jointBuildGroovyJarProperty) {
    def jointBuildGroovyJar = file(jointBuildGroovyJarProperty)
    if (jointBuildGroovyJar.exists()) {
        groovyDependency = dependencies.create(files(jointBuildGroovyJar))
    } else {
        throw new GradleException("The groovy.jar system property points to ${jointBuildGroovyJar.absolutePath} which does not exist.")
    }
} else {
    groovyDependency = dependencies.create("org.codehaus.groovy:groovy-all:${groovyVersion}") {
        exclude module:"commons-cli"
        exclude module:"ant"
    }
}

allprojects {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://repo1.maven.org/maven2/" }
        mavenLocal()
        if(groovyVersion.endsWith('-SNAPSHOT')) {
            maven {
                name 'JFrog OSS snapshot repo'
                url 'https://oss.jfrog.org/oss-snapshot-local/'
            }
        }
        if(isBuildSnapshot) {
            maven { url "http://repo.grails.org/grails/libs-snapshots-local" }
        }
    }

    configurations {
        all {
            resolutionStrategy {
                def cacheHours = isCiBuild ? 0 : 24
                cacheDynamicVersionsFor cacheHours, 'hours'
                cacheChangingModulesFor cacheHours, 'hours'
            }
        }
    }

    [Javadoc, Groovydoc].each {
        tasks.withType(it).all {
            // exclude problematic jar file from javadoc classpath
            // http://www.adam-bien.com/roller/abien/entry/trouble_with_crippled_java_ee
            if (classpath) {
                classpath -= classpath.filter { it.name == 'javaee-web-api-6.0.jar' }
            }

            // this will apply the javadoc fix tool to all generated javadocs
            // we use it to make sure that the javadocs are not vulnerable independently of the JDK used to build
            doLast {
                def javadocFix = new JavadocFixTool()
                javadocFix.recursive = true
                javadocFix.doPatch = true
                javadocFix.searchAndPatch(destinationDir)
            }
        }

    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

apply from: "gradle/idea.gradle"

subprojects { project ->
    version = grailsVersion
    group = "org.grails"

    if(!project.hasProperty("artifactoryPublishPassword") && System.getenv("ARTIFACTORY_PASSWORD")) {
        project.ext.artifactoryPublishPassword = System.getenv("ARTIFACTORY_PASSWORD")
    }

    if(project.name == 'grails-dependencies') return
    ext.isTestSuite = project.name.startsWith("grails-test-suite")
    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'project-report'
    apply plugin: 'provided-base'
    apply plugin: 'optional-base'
    if(!isTestSuite)
        apply plugin: 'signing'
    //apply plugin: 'duplicates'

    sourceCompatibility = "1.6"
    targetCompatibility = "1.6"
//    archivesBaseName = 'grails'

    ext.isCiBuild = project.hasProperty("isCiBuild")

    if(project.name =~ /^(grails-web|grails-plugin-|grails-project-api|grails-test-suite|grails-test)/) {
        dependencies {
            provided "javax.servlet:javax.servlet-api:$servletApiVersion"
            // MockHttpServletRequest/Response/Context used in many classes
            provided("org.springframework:spring-test:${springVersion}") {
                exclude group: 'commons-logging', module:'commons-logging'
            }
        }
    }

    if(project.name =~ /^(grails-plugin-datasource|grails-test-suite)/) {
        dependencies {
            provided 'hsqldb:hsqldb:1.8.0.10'
            provided 'com.h2database:h2:1.3.176'
        }
    }

    jar{
        manifest.mainAttributes(
            "Built-By": System.properties['user.name'],
            "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
            "Implementation-Title": "Grails",
            "Implementation-Version": grailsVersion,
            "Implementation-Vendor": 'grails.org')
    }


    configure([compileGroovy, compileTestGroovy]) {
        groovyOptions.fork(memoryInitialSize: '128M', memoryMaximumSize: '1G')
        groovyOptions.encoding = "UTF-8"
        options.encoding = "UTF-8"
    }

    configure([compileJava, compileTestJava]) {
        options.deprecation = true
        options.debug = true
    }

    configure([javadoc]) {
        options.encoding "UTF-8"
        options.docEncoding "UTF-8"
        options.charSet "UTF-8"
        options.jFlags "-Xms64M", "-Xmx512M"
        if(!isJava8Compatible) {
            options.jFlags "-XX:MaxPermSize=256m"
        }
    }

    idea {
        module.iml.whenMerged { module ->
            // adding slf4j-simple with scope TEST to .iml
            module.dependencies << new org.gradle.plugins.ide.idea.model.ModuleLibrary(
                    [new org.gradle.plugins.ide.idea.model.Path("jar://\$GRADLE_USER_HOME/cache/org.slf4j/slf4j-simple/jars/slf4j-simple-${slf4jVersion}.jar!/")], [], [], [], "TEST"
            )
        }
    }

    dependencies {
        compile groovyDependency

        if (project.name != "grails-docs") {
            // Logging
            compile "org.slf4j:slf4j-api:$slf4jVersion"
            compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"

            // Testing
            testCompile "junit:junit:${junitVersion}"
            testCompile("org.spockframework:spock-core:${spockVersion}") {
                transitive = false
                exclude group:'junit', module: 'junit-dep'
                exclude group:'org.codehaus.groovy', module: 'groovy-all'
            }
            // Required by Spock's Mocking
            testCompile "cglib:cglib:${cglibVersion}"
            testCompile "org.objenesis:objenesis:${objenesisVersion}"
        }
    }

    def debugArguments = ['-Xmx2g', '-Xdebug', '-Xnoagent', '-Djava.compiler=NONE',
                          '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']

    test {
        excludes = ["**/*TestCase.class", "**/*\$*.class"]
        if (isTravisBuild) {
            maxParallelForks = 2
            maxHeapSize = '768m'
            if(!isJava8Compatible) {
                jvmArgs '-XX:MaxPermSize=256m'
            }
            afterSuite {
                System.out.print('.')
                System.out.flush()
            }
        } else {
            maxHeapSize = '1024m'
            if(!isJava8Compatible) {
                jvmArgs '-XX:MaxPermSize=384m'
            }
        }
        if(System.getProperty("debug.tests")) {
            jvmArgs debugArguments
        }
    }

    task singleTest(type: Test) {
        // task for running a single test with -DsingleTest.single=TestName singleTest
        if(System.getProperty("debug.tests")) {
            jvmArgs debugArguments
        }
    }

    if(!isTestSuite) {
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn:javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

    }

    groovydoc.doLast {
        delete("${buildDir}/tmp")
    }

    configurations {
        meta
        published.extendsFrom archives, meta
        all*.exclude group:'commons-logging', module: 'commons-logging'
    }

    if(!isTestSuite) {
        artifacts {
            archives jar
            def excludedTaskNames = gradle.startParameter.excludedTaskNames
            if(!excludedTaskNames.contains('sourcesJar')) {
                archives sourcesJar
            }
            if(!excludedTaskNames.contains('javadocJar')) {
                archives javadocJar
            }
        }

        signing {
            sign configurations.archives
            required { !isBuildSnapshot && gradle.taskGraph.hasTask(uploadPublished) }
        }

        ext {
            poms = [project.install.repositories.mavenInstaller.pom]
            pomModifications = []
            modifyPom = { Closure modification -> project.pomModifications << modification }
        }

        task installToHomeDist(type: Upload) {
            configuration = configurations.archives
            repositories {
                project.poms << mavenDeployer {
                    repository(url: distInstallDir.toURL())
                    uniqueVersion = false
                    pom.artifactId = project.name
                }.pom
            }
        }

        install.dependsOn installToHomeDist
        install.doLast {
            ant.copy(todir:homeDistDir, flatten:true, includeEmptyDirs:false) {
                fileset dir:distInstallDir
            }
            // This is a temporary hack.  Since https://github.com/grails/grails-core/commit/f7c5882057386853fdbf30c42b2212cfebad3c01
            // the wrapper support jar is not being copied to the dist dir.  Pending a real solution, this should work.
            if(project.name == 'grails-wrapper') {
                ant.copy(todir: homeDistDir) {
                    fileset dir: 'build/libs', includes: '*wrapper-support*'
                }
            }
        }

        uploadPublished {
            repositories {
                project.poms << mavenDeployer {
                    if(!isBuildSnapshot) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    }

                    if(project.hasProperty("sonatypeUsername")) {
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: project.hasProperty("sonatypeUsername") ? project.sonatypeUsername : null,
                                        password: project.hasProperty("sonatypePassword") ?  project.sonatypePassword : null)
                    }
                    }
                    if(project.hasProperty("artifactoryPublishUsername")) {
                        snapshotRepository(url: "https://repo.grails.org/grails/libs-snapshots-local") {
                        authentication(userName: project.hasProperty("artifactoryPublishUsername") ? project.artifactoryPublishUsername : null,
                            password: project.hasProperty("artifactoryPublishPassword") ?  project.artifactoryPublishPassword : null)
                        }
                    }


                }.pom
            }
        }

        modifyPom { pom ->
            pom.project {
                name 'Grails'
                packaging 'jar'
                description 'Grails Web Application Framework'
                delegate.url 'http://grails.org/'

                scm {
                    delegate.url 'scm:git@github.com:grails/grails-core.git'
                    connection 'scm:git@github.com:grails/grails-core.git'
                    developerConnection 'scm:git@github.com:grails/grails-core.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        delegate.url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'graemerocher'
                        name 'Graeme Rocher'
                    }
                    developer {
                        id 'jeffscottbrown'
                        name 'Jeff Brown'
                    }
                    developer {
                        id 'lhotari'
                        name 'Lari Hotari'
                    }
                }
            }
        }

        poms*.whenConfigured { pomModifications*.call(it) }
    }

}

task clean(type: Delete) {
    delete buildDir,
           homeBinDir,
           homeConfDir,
           homeDistDir,
           homeLibDir,
           homeSrcDir
}

// From this point on we need the subprojects to be fully configured, so force their full evaluation
subprojects.each { evaluationDependsOn it.path }

apply {
    from 'gradle/docs.gradle' // tasks for building the documentation (e.g. user guide, javadocs)
    from 'gradle/assemble.gradle' // tasks for creating an installation or distribution
    from 'gradle/findbugs.gradle'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
    jarFile = 'gradle/wrapper/gradle-wrapper.jar'
}

task buildscriptDependencies(type: org.gradle.api.tasks.diagnostics.DependencyReportTask) {
    configurations = project.buildscript.configurations
}

[Javadoc, Groovydoc].each {
    tasks.withType(it).all {
        // exclude problematic jar file from javadoc classpath
        // http://www.adam-bien.com/roller/abien/entry/trouble_with_crippled_java_ee
        if (classpath) {
            classpath -= classpath.filter { it.name == 'javaee-web-api-6.0.jar' }
        }
    }
}
