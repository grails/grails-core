import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "commons-io:commons-io:2.2"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1"
        classpath "com.github.adrianbk:gradle-travisci-trigger-plugin:1.0.0"
    }
}

apply plugin: 'idea'

ext.optionalDeps = []
ext.providedDeps = []

ext.provided = { providedDeps << it }
ext {
    bintrayPublish = false
    grailsVersion = '3.0.0.BUILD-SNAPSHOT'
    isBuildSnapshot = grailsVersion.endsWith(".BUILD-SNAPSHOT")
    isTravisBuild = System.getenv().get("TRAVIS") == 'true'

    antTraxVersion = "1.7.1"
    antVersion = "1.9.3"
    aspectjVersion = "1.8.2"
    commonsCliVersion = "1.2"
    commonsCollectionsVersion = "3.2.1"
    commonsIOVersion = "2.2"
    commonsLangVersion = "2.6"
    datastoreVersion = "4.0.0.M2"
    gantVersion = "1.9.6"
    gdocEngineVersion = "1.0.1"
    groovyVersion = "2.4.1"
    ivyVersion = "2.3.0"
    jansiVersion = "1.11"
    jlineVersion = "2.12"
    jnaVersion = "4.0.0"
    slf4jVersion = "1.7.10"

    spockVersion = '0.7-groovy-2.0'
    springLoadedVersion = "1.2.1.RELEASE"
    springBootVersion = "1.2.1.RELEASE"
    springLoadedCommonOptions = "-Xverify:none -Dspringloaded.synchronize=true -Djdk.reflect.allowGetCallerClass=true"
    springVersion = "4.1.5.RELEASE"
    ehcacheVersion = "2.4.6"
    junitVersion = "4.12"
    concurrentlinkedhashmapVersion = "1.4"
    cglibVersion = "2.2.2"
    objenesisVersion = "1.4"
    tomcatVersion = "7.0.55"

    isJava8Compatible = org.gradle.api.JavaVersion.current().isJava8Compatible()
}

version = grailsVersion

// directories created during the build which are related
// to turning the workspace root into a GRAILS_HOME
ext {
    distInstallDir = file("$buildDir/dist-tmp")
    homeDistDir = file("dist")
    homeBinDir = file("bin")
    homeConfDir = file("conf")
    homeLibDir = file("lib")
    homeSrcDir = file("src")
}

// Groovy is added as a dependency to both the 'groovy' and 'compile'
// configurations, so place the dependency in a shared variable. The
// 'compile' is required so that Groovy appears as a dependency in the
// artifacts' POMs.
ext.jointBuildGroovyJarProperty = System.getProperty('groovy.jar')
ext.groovyDependency = null
if (jointBuildGroovyJarProperty) {
    def jointBuildGroovyJar = file(jointBuildGroovyJarProperty)
    if (jointBuildGroovyJar.exists()) {
        groovyDependency = dependencies.create(files(jointBuildGroovyJar))
    } else {
        throw new GradleException("The groovy.jar system property points to ${jointBuildGroovyJar.absolutePath} which does not exist.")
    }
} else {
    groovyDependency = dependencies.create("org.codehaus.groovy:groovy:${groovyVersion}") {
        exclude module:"commons-cli"
        exclude module:"ant"
    }
}

allprojects {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        mavenLocal()
        if(isBuildSnapshot) {
            maven { url "https://repo.spring.io/repo"}
            maven { url "https://repo.grails.org/grails/libs-snapshots-local" }
            maven { url "https://repo.gradle.org/gradle/libs-snapshots-local" }
        }
    }

    configurations {
        all {
            resolutionStrategy {
                def cacheHours = isCiBuild ? 0 : 24
                cacheDynamicVersionsFor cacheHours, 'hours'
                cacheChangingModulesFor cacheHours, 'hours'
            }
        }
    }
// this will apply the javadoc fix tool to all generated javadocs
// we use it to make sure that the javadocs are not vulnerable independently of the JDK used to build
    [Javadoc, Groovydoc].each {
        tasks.withType(it).all {
            doLast {
                def javadocFix = new JavadocFixTool()
                javadocFix.recursive = true
                javadocFix.doPatch = true
                javadocFix.searchAndPatch(destinationDir)
            }
        }

    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

apply from: "gradle/idea.gradle"

subprojects { project ->
    version = grailsVersion
    group = "org.grails"
    ext.isTestSuite = project.name.startsWith("grails-test-suite")
    ext.isCiBuild = project.hasProperty("isCiBuild")

    if(!project.hasProperty("artifactoryPublishPassword") && System.getenv("ARTIFACTORY_PASSWORD")) {
        project.ext.artifactoryPublishPassword = System.getenv("ARTIFACTORY_PASSWORD")
    }

    if(project.name == 'grails-dependencies') return
    if(project.name == 'grails-bom') return

    apply plugin: 'groovy'
    if(!isTestSuite) {
        apply plugin: 'maven-publish'
        apply plugin: 'com.jfrog.bintray'
    }
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'project-report'

    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"



    jar{
        manifest.mainAttributes(
            "Built-By": System.properties['user.name'],
            "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
            "Implementation-Title": "Grails",
            "Implementation-Version": grailsVersion,
            "Implementation-Vendor": 'grails.org')
    }


    configure([compileGroovy, compileTestGroovy]) {
        groovyOptions.fork(memoryInitialSize: '128M', memoryMaximumSize: '1G')
        groovyOptions.encoding = "UTF-8"
        options.encoding = "UTF-8"
    }

    configure([compileJava, compileTestJava]) {
        options.deprecation = true
        options.debug = true
    }

    configure([javadoc]) {
        options.encoding "UTF-8"
        options.docEncoding "UTF-8"
        options.charSet "UTF-8"
        options.jFlags "-Xms64M", "-Xmx512M"
        if(!isJava8Compatible) {
            options.jFlags "-XX:MaxPermSize=256m"
        }
    }

    idea {
        module.iml.whenMerged { module ->
            // adding slf4j-simple with scope TEST to .iml
            module.dependencies << new org.gradle.plugins.ide.idea.model.ModuleLibrary(
                    [new org.gradle.plugins.ide.idea.model.Path("jar://\$GRADLE_USER_HOME/cache/org.slf4j/slf4j-simple/jars/slf4j-simple-${slf4jVersion}.jar!/")], [], [], [], "TEST"
            )
        }
    }

    dependencies {
        compile groovyDependency

        testCompile "org.codehaus.groovy:groovy-test:${groovyVersion}", {
            exclude group:'junit', module: 'junit'
            exclude group:'org.codehaus.groovy', module: 'groovy'
            exclude group:'org.hamcrest', module: 'hamcrest-core'
        }

        if (project.name != "grails-docs") {
            // Logging
            compile "org.slf4j:slf4j-api:$slf4jVersion"
            compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"

            // Testing
            testCompile "junit:junit:${junitVersion}"

            testCompile("org.spockframework:spock-core:${spockVersion}") {
                transitive = false
                exclude group:'junit', module: 'junit-dep'
                exclude group:'org.codehaus.groovy', module: 'groovy-all'
            }
            // Required by Spock's Mocking
            testCompile "cglib:cglib-nodep:${cglibVersion}"
            testCompile "org.objenesis:objenesis:${objenesisVersion}"
        }
    }

    def debugArguments = ['-Xmx2g', '-Xdebug', '-Xnoagent', '-Djava.compiler=NONE',
                          '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']

    test {
        excludes = ["**/*TestCase.class", "**/*\$*.class"]
        if (isTravisBuild) {
            maxParallelForks = 2
            maxHeapSize = '768m'
            if(!isJava8Compatible) {
                jvmArgs '-XX:MaxPermSize=256m'
            }
            afterSuite {
                System.out.print('.')
                System.out.flush()
            }
        } else {
            maxHeapSize = '1024m'
            if(!isJava8Compatible) {
                jvmArgs '-XX:MaxPermSize=384m'
            }
        }
        if(System.getProperty("debug.tests")) {
            jvmArgs debugArguments
        }
    }

    task singleTest(type: Test) {
        // task for running a single test with -DsingleTest.single=TestName singleTest
        if(System.getProperty("debug.tests")) {
            jvmArgs debugArguments
        }
    }

    if(!isTestSuite) {
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn:javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

    }

    groovydoc.doLast {
        delete("${buildDir}/tmp")
    }

    configurations {
        meta
        published.extendsFrom archives, meta
        all*.exclude group:'commons-logging', module: 'commons-logging'
    }

    if(!isTestSuite) {
        artifacts {
            archives jar
            def excludedTaskNames = gradle.startParameter.excludedTaskNames
            if(!excludedTaskNames.contains('sourcesJar')) {
                archives sourcesJar
            }
            if(!excludedTaskNames.contains('javadocJar')) {
                archives javadocJar
            }
        }


        task installToHomeDist(type: Upload) {
            configuration = configurations.archives
            repositories {

                flatDir name: 'libs', dirs: distInstallDir
//                project.poms << mavenDeployer {
//                    repository(url: distInstallDir.toURL())
//                    uniqueVersion = false
//                    pom.artifactId = project.name
//                }.pom
            }
        }

        publishing {

            repositories {
                maven {
                    credentials {
                        def u = System.getenv("ARTIFACTORY_USERNAME") ?: project.hasProperty("artifactoryPublishUsername") ? project.artifactoryPublishUsername : ''
                        def p = System.getenv("ARTIFACTORY_PASSWORD") ?: project.hasProperty("artifactoryPublishPassword") ? project.artifactoryPublishPassword : ''
                        username = u
                        password = p
                    }
                    if(isBuildSnapshot) {
                        url  "https://repo.grails.org/grails/libs-snapshots-local"
                    }
                    else {
                        url "https://repo.grails.org/grails/libs-releases-local"
                    }
                }
            }

            publications {
                maven(MavenPublication) {
                    from components.java

                    artifact sourcesJar {
                        classifier "sources"
                    }
                    artifact javadocJar {
                        classifier "javadoc"
                    }

                    pom.withXml {
                        def xml = asNode()
                        // respect 'optional' and 'provided' dependencies
                        optionalDeps.each { dep ->
                            xml.dependencies.find { it.artifactId == dep.name }?.optional = true
                        }
                        providedDeps.each { dep ->
                            xml.dependencies.find { it.artifactId == dep.name }?.scope = 'provided'

                        }

                        configurations.runtime.allDependencies.each { dependency ->
                            if (dependency.hasProperty("notInPom") && dependency.notInPom) {
                                xml.dependencies.removeAll { it.groupId == dependency.group && it.artifactId == dependency.name }
                            }
                        }

                        xml.children().last() + {
                            delegate.name 'Grails'
                            delegate.description 'Grails Web Application Framework'
                            delegate.url 'http://grails.org/'

                            delegate.licenses {
                                delegate.license {
                                    delegate.name 'The Apache Software License, Version 2.0'
                                    delegate.url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                    delegate.distribution 'repo'
                                }
                            }

                            delegate.scm {
                                delegate.url 'scm:git@github.com:grails/grails-core.git'
                                delegate.connection 'scm:git@github.com:grails/grails-core.git'
                                delegate.developerConnection 'scm:git@github.com:grails/grails-core.git'
                            }



                            delegate.developers {
                                delegate.developer {
                                    delegate.id 'graemerocher'
                                    delegate.name 'Graeme Rocher'
                                }
                                delegate.developer {
                                    delegate.id 'jeffscottbrown'
                                    delegate.name 'Jeff Brown'
                                }
                                delegate.developer {
                                    delegate.id 'burtbeckwith'
                                    delegate.name 'Burt Beckwith'
                                }
                            }

                        }
                    }

                }
            }
        }


        bintray {
            def u = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
            def p = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''

            user = u
            key = p
            publications = ['maven']
            publish = bintrayPublish
            pkg {
                repo = 'grails-core'
                userOrg = 'grails'
                name = 'org.grails'
                desc = 'Grails Framework'
                websiteUrl = 'http://grails.org'
                issueTrackerUrl = 'http://jira.grails.org/browse/GRAILS'
                vcsUrl = 'http://jira.grails.org/browse/GRAILS'
                licenses = ['Apache-2.0']
                publicDownloadNumbers = true
                version {
                    name = project.version
                    gpg {
                        sign = true
                        passphrase = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signingPassphrase") ? project.signingPassphrase : ''
                    }
                    mavenCentralSync {
                        sync = false
                        def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                        def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
                        user = ossUser
                        password = ossPass
                    }

                }
            }
        }

        project.tasks.withType(org.gradle.api.publish.maven.tasks.PublishToMavenLocal) { org.gradle.api.publish.maven.tasks.PublishToMavenLocal t ->
            t.dependsOn installToHomeDist
            t.doLast {
                ant.copy(todir: homeDistDir, flatten: true, includeEmptyDirs: false) {
                    fileset dir: distInstallDir
                }
            }
        }

    }

}



task clean(type: Delete) {
    delete buildDir,
           homeBinDir,
           homeConfDir,
           homeDistDir,
           homeLibDir,
           homeSrcDir
}

// From this point on we need the subprojects to be fully configured, so force their full evaluation
subprojects.each { evaluationDependsOn it.path }

apply {
    from 'gradle/docs.gradle' // tasks for building the documentation (e.g. user guide, javadocs)
    from 'gradle/assemble.gradle' // tasks for creating an installation or distribution
    from 'gradle/findbugs.gradle'
}

apply plugin: "com.github.adrianbk.tcitrigger"


tciTrigger {
    gitHubRepo 'grails/grails3-functional-tests'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
    jarFile = 'gradle/wrapper/gradle-wrapper.jar'
}
