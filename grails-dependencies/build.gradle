import org.gradle.api.internal.project.IsolatedAntBuilder

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

configurations {
    mavenAntTasks
}
dependencies {
    mavenAntTasks 'org.apache.maven:maven-ant-tasks:2.1.1'
}

task uploadArchives(dependsOn:project.tasks.withType(PublishToMavenLocal)) << {
    def antBuilder = services.get(IsolatedAntBuilder)
    def rootDir = project.parent.projectDir
    antBuilder.withClasspath(configurations.mavenAntTasks).execute {
        taskdef(resource: 'org/apache/maven/artifact/ant/antlib.xml')
        def isSnapshot = version.endsWith("-SNAPSHOT")
        def url = isSnapshot ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def repoId = isSnapshot ? "sonatype-nexus-snapshots" : "sonatype-nexus-staging"
        mvn {
            arg value:"org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"
            arg value:"-Dgpg.homedir=${rootDir.absolutePath}"
            arg value:"-Dgpg.keyname=${System.getenv("SIGNING_KEY")}"
            arg value:"-Dgpg.passphrase=${System.getenv("SIGNING_PASSWORD")}"
            arg value:"-Durl=${url}"
            arg value:"-DrepositoryId=${repoId}"
            arg value:"-DpomFile=${buildDir}/publications/maven/pom-default.xml"
            arg value:"-Dfile=${buildDir}/publications/maven/pom-default.xml"
            arg value:"-Pgpg"
        }
    }
}

publishing {

    repositories {
        maven {
            credentials {
                def u = System.getenv("ARTIFACTORY_USERNAME") ?: project.hasProperty("artifactoryPublishUsername") ? project.artifactoryPublishUsername : ''
                def p = System.getenv("ARTIFACTORY_PASSWORD") ?: project.hasProperty("artifactoryPublishPassword") ? project.artifactoryPublishPassword : ''
                username = u
                password = p
            }
            if(isBuildSnapshot) {
                url  "https://repo.grails.org/grails/libs-snapshots-local"
            }
            else {
                url "https://repo.grails.org/grails/libs-releases-local"
            }
        }
    }

    publications {
        maven(MavenPublication) {
            pom.withXml {
                def xml = asNode()

                xml.children().last() + {
                    delegate.name "Grails Dependencies"
                    delegate.description "Grails default supported dependency definitions"
                    delegate.url 'http://grails.org'
                    delegate.licenses {
                        delegate.license {
                            delegate.name "Apache License, Version 2.0"
                            delegate.url 'http://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }
                    delegate.scm {
                        delegate.url 'scm:git@github.com:grails/grails-core.git'
                        delegate.connection 'scm:git@github.com:grails/grails-core.git'
                        delegate.developerConnection 'scm:git@github.com:grails/grails-core.git'
                    }

                    delegate.developers {
                        delegate.developer {
                            delegate.id 'graemerocher'
                            delegate.name 'Graeme Rocher'
                        }
                        delegate.developer {
                            delegate.id 'jeffscottbrown'
                            delegate.name 'Jeff Brown'
                        }
                        delegate.developer {
                            delegate.id 'lhotari'
                            delegate.name 'Lari Hotari'
                        }
                    }

                    delegate.dependencies {
                        delegate.dependency {
                            delegate.groupId "org.grails"
                            delegate.artifactId "grails-bootstrap"
                            delegate.version( project.version )
                            delegate.scope "compile"

                            delegate.exclusions {
                                delegate.exclusion {
                                    delegate.groupId 'jline'
                                    delegate.artifactId 'jline'
                                }
                                delegate.exclusion {
                                    delegate.groupId 'org.fusesource.jansi'
                                    delegate.artifactId 'jansi'
                                }
                                delegate.exclusion {
                                    delegate.groupId 'net.java.dev.jna'
                                    delegate.artifactId 'jna'
                                }
                                delegate.exclusion {
                                    delegate.groupId 'org.codehaus.groovy'
                                    delegate.artifactId 'groovy-ant'
                                }
                            }
                        }
                        for(sub in ['rest', 'databinding', 'i18n', 'services', 'url-mappings', 'interceptors']) {
                            delegate.dependency {
                                delegate.groupId "org.grails"
                                delegate.artifactId "grails-plugin-${sub}"
                                delegate.version( project.version )
                                delegate.scope "compile"
                            }
                        }
                        delegate.dependency {
                            delegate.groupId "org.grails.plugins"
                            delegate.artifactId "async"
                            delegate.version asyncVersion
                            delegate.scope "compile"
                            delegate.exclusions {
                                delegate.exclusion {
                                    delegate.groupId 'javax'
                                    delegate.artifactId 'javaee-web-api'
                                }
                            }
                        }
                        delegate.dependency {
                            delegate.groupId "org.grails.plugins"
                            delegate.artifactId "gsp"
                            delegate.version gspVersion
                            delegate.scope "compile"
                            delegate.exclusions {
                                delegate.exclusion {
                                    delegate.groupId 'javax'
                                    delegate.artifactId 'javaee-web-api'
                                }
                            }
                        }
                        delegate.dependency {
                            delegate.groupId "com.h2database"
                            delegate.artifactId "h2"
                            delegate.version( "1.3.176" )
                            delegate.scope "runtime"
                        }

                        delegate.dependency {
                            delegate.groupId "org.grails"
                            delegate.artifactId "grails-plugin-testing"
                            delegate.version( project.version )
                            delegate.scope "test"
                        }


                    }
                }
            }

        }
    }
}


bintray {
    def u = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
    def p = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''

    user = u
    key = p
    publications = ['maven']
    publish = bintrayPublish
    pkg {
        repo = 'grails-core'
        userOrg = 'grails'
        name = 'org.grails'
        desc = 'Grails Framework'
        websiteUrl = 'http://grails.org'
        issueTrackerUrl = 'http://jira.grails.org/browse/GRAILS'
        vcsUrl = 'http://jira.grails.org/browse/GRAILS'
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
        version {
            name = project.version
            gpg {
                sign = true
                passphrase = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signingPassphrase") ? project.signingPassphrase : ''
            }
            mavenCentralSync {
                sync = false
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
                user = ossUser
                password = ossPass
            }

        }
    }
}
