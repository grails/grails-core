configurations.all {
    resolutionStrategy {
        force "org.hamcrest:hamcrest-core:1.3"
    }
}

dependencies {
    compileOnly "org.aspectj:aspectjrt", "org.aspectj:aspectjweaver"
    api "jakarta.inject:jakarta.inject-api"
    api "jakarta.persistence:jakarta.persistence-api"
    api "jakarta.annotation:jakarta.annotation-api"

    implementation "com.github.ben-manes.caffeine:caffeine"
    api("org.springframework.boot:spring-boot")
    api "org.springframework:spring-core"
    api "org.springframework:spring-tx"
    api "org.springframework:spring-beans"
    api "org.springframework:spring-context"

    compileOnly "org.springframework:spring-test"
    compileOnly "org.apache.groovy:groovy-templates"

    api project(":grails-bootstrap")
    api project(":grails-spring")

    api "org.grails:grails-datastore-core"

    testImplementation "org.springframework:spring-jdbc"

    testImplementation "org.hamcrest:hamcrest-core:1.3"

    testRuntimeOnly "com.h2database:h2"
    testRuntimeOnly "com.fasterxml.jackson.core:jackson-databind"
}

def writeProps = tasks.register('writeGrailsProperties', WriteProperties) {
    outputFile = file("${buildDir}/grails.build.properties")
    property("grails.version", project.version)
}

tasks.named('processResources') {
    from writeProps
}

eclipse {
    classpath {
       file {
           whenMerged { classpath ->
                // don't add global ASTs since the source code is in this project and that causes greclipse compilation to fail
                classpath.entries.find { entry -> entry.kind == 'src' && entry.path == "src/main/resources" }?.excludes=["META-INF/services/org.codehaus.groovy.transform.ASTTransformation"]
           }
       }
    }
}
