apply plugin: org.grails.gradle.GrailsBuildPlugin

def libsConfigurations = []
subprojects { subproject ->
    if(subproject.name == 'grails-dependencies') return
    if(subproject.name == 'grails-bom') return
    if(subproject.name == 'grails-core') {

        configurations {
            libsConfigurations << libs {
                extendsFrom compileClasspath, runtimeClasspath
                ["jsp21", "uaa"].collect { configurations.findByName(it) }.findAll { it != null }.each { extendsFrom it }
            }
        }
    }
}

task configurePopulateDependencies {
    ext {
        baseCachesDir = "$gradle.gradleUserHomeDir/caches"
        cacheDir = "$baseCachesDir/modules-2"
        metadata = "$cacheDir/metadata-2.1/descriptors"
    }
    doLast {
        def projectNames = rootProject.subprojects*.name

        def seen = []
        libsConfigurations.each { configuration ->
            def sourceArtifacts = sourcesFor(configuration).resolvedConfiguration.lenientConfiguration.getArtifacts(Specs.satisfyAll()).groupBy {
                it.moduleVersion.id
            }
            def javadocArtifacts = javadocFor(configuration).resolvedConfiguration.lenientConfiguration.getArtifacts(Specs.satisfyAll()).groupBy {
                it.moduleVersion.id
            }
            def pomArtifacts = pomFor(configuration).resolvedConfiguration.lenientConfiguration.getArtifacts(Specs.satisfyAll()).groupBy {
                it.moduleVersion.id
            }

            for (artifact in configuration.resolvedConfiguration.resolvedArtifacts) {
                if (artifact in seen) continue
                seen << artifact
                def dependency = artifact.moduleVersion.id
                if (!projectNames.contains(dependency.name)) {
                    populateDependencies.into("$dependency.group/$dependency.name/jars") {
                        from artifact.file // this will trigger the actual download if necessary
                        def sourceJar = sourceArtifacts[dependency]
                        if (sourceJar) {
                            from sourceJar.file
                        }
                        def javadocJar = javadocArtifacts[dependency]
                        if (javadocJar) {
                            from javadocJar.file
                        }
                    }

                    populateDependencies.into("$dependency.group/$dependency.name/jars") {
                        from artifact.file // this will trigger the actual download if necessary
                        def sourceJar = sourceArtifacts[dependency]
                        if (sourceJar) {
                            from sourceJar.file
                        }
                        def javadocJar = javadocArtifacts[dependency]
                        if (javadocJar) {
                            from javadocJar.file
                        }
                    }

                    populateDependencies.into("$dependency.group/$dependency.name") {
                        def pomFile = pomArtifacts[dependency]
                        if (pomFile) {
                            from pomFile.file
                        }
                    }

                    populateDependencies.from("${metadata}/${dependency.group}/${dependency.name}/${dependency.version}") {
                        include "**/*ivy.xml"
                        eachFile { it.path = "$dependency.group/$dependency.name/ivy-${dependency.version}.xml" }
                    }
                }
            }
        }
    }
}

task populateDependencies(type: Sync, dependsOn: configurePopulateDependencies) {
    into homeLibDir
    includeEmptyDirs = false
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Can't use sync task here because this directory contains other things as well.
task sourcesJars(type: Sync) {
    into homeSrcDir
    from subprojects
            .findAll { subproject -> !subproject.name.startsWith('grails-test-suite') &&
                    !subproject.name.startsWith('grails-dependencies') &&
                    !subproject.name.startsWith('grails-bom')
            }.sourcesJar*.outputs*.files
    // sourcesFor comes from GrailsBuildPlugin
    from { sourcesFor(libsConfigurations*.copyRecursive { it.name.startsWith('grails-datastore') }.collect { it.transitive = false; it }) }
}

task install(dependsOn: [populateDependencies]) { task ->
    subprojects { Project project ->
        if(!project.name.startsWith('grails-test-suite')) {
            task.dependsOn("$project.name:publishToMavenLocal")
        }
    }
}

task zipDist(type: Zip, dependsOn: [sourcesJars, install]) {
    destinationDirectory = project.layout.buildDirectory.dir("distributions")
    archiveBaseName = 'grails'
    archiveAppendix = grailsVersion

    exclude "**/CVS/**"

    into("grails-$grailsVersion") {
        from(projectDir) {
            include 'lib/', 'media/', 'samples/', 'scripts/', 'LICENSE', 'INSTALL', "src/"
            exclude 'ant/bin', 'src/grails', 'src/war'
        }
        from(project.layout.buildDirectory.dir("docs").get().asFile) {
            into "doc"
        }
        from("conf") {
            into "conf"
        }
        from(homeDistDir) {
            into "dist"
            exclude "*.zip"
        }
    }
}

task assemble(dependsOn: zipDist)
