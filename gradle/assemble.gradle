import org.gradle.api.internal.plugins.StartScriptGenerator
import org.gradle.api.internal.plugins.UnixStartScriptGenerator
import org.gradle.api.internal.plugins.WindowsStartScriptGenerator
import org.grails.gradle.GrailsBuildPlugin

apply plugin: GrailsBuildPlugin

List<Configuration> libsConfigurations = []
subprojects { subproject ->
    if (subproject.name in ['grails-shell', 'grails-core']) {
        libsConfigurations << configurations.create("${subproject.name}-libs") {
            extendsFrom configurations.compileClasspath, configurations.runtimeClasspath
        }
    }
}

tasks.register('configurePopulateDependencies') {
    ext.set('baseCachesDir', "$gradle.gradleUserHomeDir/caches")
    ext.set('cacheDir', "$baseCachesDir/modules-2")
    ext.set('metadata', "$cacheDir/metadata-2.1/descriptors")
    doLast {
        def projectNames = rootProject.subprojects*.name
        def seen = []
        libsConfigurations.each { configuration ->
            configuration.exclude(group: 'org.codehaus.groovy')
            def sourceArtifacts = sourcesFor(configuration).resolvedConfiguration.lenientConfiguration.artifacts.groupBy {
                it.moduleVersion.id
            }
            def javadocArtifacts = javadocFor(configuration).resolvedConfiguration.lenientConfiguration.artifacts.groupBy {
                it.moduleVersion.id
            }
            def pomArtifacts = pomFor(configuration).resolvedConfiguration.lenientConfiguration.artifacts.groupBy {
                it.moduleVersion.id
            }

            for (artifact in configuration.resolvedConfiguration.resolvedArtifacts) {
                if (artifact in seen) continue
                seen << artifact
                def dependency = artifact.moduleVersion.id
                if (!projectNames.contains(dependency.name)) {
                    populateDependencies.into("$dependency.group/$dependency.name/jars") {
                        from artifact.file // this will trigger the actual download if necessary
                        def sourceJar = sourceArtifacts[dependency]
                        if (sourceJar) {
                            from sourceJar.file
                        }
                        def javadocJar = javadocArtifacts[dependency]
                        if (javadocJar) {
                            from javadocJar.file
                        }
                    }

                    populateDependencies.into("$dependency.group/$dependency.name/jars") {
                        from artifact.file // this will trigger the actual download if necessary
                        def sourceJar = sourceArtifacts[dependency]
                        if (sourceJar) {
                            from sourceJar.file
                        }
                        def javadocJar = javadocArtifacts[dependency]
                        if (javadocJar) {
                            from javadocJar.file
                        }
                    }

                    populateDependencies.into("$dependency.group/$dependency.name") {
                        def pomFile = pomArtifacts[dependency]
                        if (pomFile) {
                            from pomFile.file
                        }
                    }

                    populateDependencies.from("${metadata}/${dependency.group}/${dependency.name}/${dependency.version}") {
                        include "**/*ivy.xml"
                        eachFile { it.path = "$dependency.group/$dependency.name/ivy-${dependency.version}.xml" }
                    }
                }
            }
        }
    }
}

tasks.register('populateDependencies', Sync) {
    dependsOn 'configurePopulateDependencies'
    into homeLibDir
    includeEmptyDirs = false
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Can't use sync task here because this directory contains other things as well.
tasks.register('sourcesJars', Sync) {
    into homeSrcDir
    from rootProject.subprojects.findAll { subproject ->
        !subproject.name.startsWith('grails-test-suite') &&
        !subproject.name.startsWith('grails-dependencies') &&
        !subproject.name.startsWith('grails-bom')
    }.sourcesJar*.outputs*.files
    // sourcesFor comes from GrailsBuildPlugin
    from {
        sourcesFor(
            libsConfigurations*.copyRecursive { it.name.startsWith('grails-datastore') }.collect { it.transitive = false; it }
        )
    }
}

tasks.register('grailsCreateStartScripts', GrailsCreateStartScripts) {
    description = 'Creates OS specific scripts to run grails-shell as a JVM application.'
    mainClass = 'org.grails.cli.GrailsCli'
    applicationName = 'grails'
    defaultJvmOpts = ['-XX:+TieredCompilation', '-XX:TieredStopAtLevel=1', '-XX:CICompilerCount=3']
    outputDir = rootProject.layout.projectDirectory.dir('bin').asFile
    classpath = rootProject.childProjects['grails-shell'].configurations.runtimeClasspath
    projectArtifacts = rootProject.childProjects['grails-shell'].tasks.named('jar').get().outputs.files.collect { "dist/${it.name}" } as List<String>
    doLast {
        ant.replace(file: rootProject.layout.projectDirectory.file('bin/grails').asFile, token: 'media/gradle.icns', value: 'media/icons/grails.icns')
        ant.chmod(file: rootProject.layout.projectDirectory.file('bin/grails').asFile, perm: 'ugo+rx')
    }
}

class GrailsCreateStartScripts extends CreateStartScripts {

    @Input
    Collection<String> projectArtifacts = []

    @TaskAction
    void generate() {
        Project grailsShellProject = project.rootProject.childProjects['grails-shell']
        def unixStartScriptGenerator = new UnixStartScriptGenerator()
        unixStartScriptGenerator.template = grailsShellProject.resources.text.fromFile('src/main/resources/unixStartScript.txt')
        def generator = new StartScriptGenerator(unixStartScriptGenerator, new WindowsStartScriptGenerator())
        generator.applicationName = applicationName
        generator.mainClassName = mainClass.get()
        generator.defaultJvmOpts = defaultJvmOpts
        generator.optsEnvironmentVar = optsEnvironmentVar
        generator.exitEnvironmentVar = exitEnvironmentVar
        generator.classpath = projectArtifacts + getClasspath().resolvedConfiguration.resolvedArtifacts.collect { artifact ->
            def dependency = artifact.moduleVersion.id
            String installedFile = "lib/$dependency.group/$dependency.name/jars/$artifact.file.name"
            if(dependency.group == 'org.grails' && !project.file(installedFile).exists()) {
                installedFile = "dist/$artifact.file.name"
            }
            installedFile
        }
        generator.scriptRelPath = "bin/${unixScript.name}"
        generator.generateUnixScript(unixScript)
        generator.generateWindowsScript(windowsScript)
    }
}

tasks.register('install') { task ->
    dependsOn 'populateDependencies', 'grailsCreateStartScripts'
    subprojects { Project project ->
        if(!project.name.startsWith('grails-test-suite')) {
            task.dependsOn("$project.name:publishToMavenLocal")
        }
    }
}
//task install(dependsOn: [populateDependencies, grailsCreateStartScripts] + subprojects.findAll { !it.name.startsWith('grails-test-suite') }
//                                                                                                        *.collect { Project p -> p.tasks.withType(PublishToMavenLocal)})

tasks.register('zipDist', Zip) {
    dependsOn 'sourcesJars', 'install'
    destinationDirectory = rootProject.layout.buildDirectory.dir('distributions')
    archiveBaseName = 'grails'
    archiveAppendix = grailsVersion

    exclude '**/CVS/**'

    into("grails-$grailsVersion") {
        from(rootProject.layout.projectDirectory) {
            // Some of these are probably not needed as they are not present in the project folder
            include 'bin/grails', 'bin/grails.bat', 'lib/', 'media/', 'samples/', 'scripts/', 'LICENSE', 'INSTALL', 'src/'
            exclude 'ant/bin', 'src/grails', 'src/war'
        }
        from(tasks.docs) {
            into 'doc'
        }
        from(homeDistDir) {
            into 'dist'
            exclude '*.zip'
        }
    }
}

tasks.register('assemble') {
    dependsOn 'zipDist'
}
