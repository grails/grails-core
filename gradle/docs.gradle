import org.grails.gradle.FetchGrailsDocSourceTask

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
}

/**
 * Since Grails is a mixed Groovy/Java codebase the javadoc tool needs stubs in order for javadoc compilation to pass
 * This target generates a set of stubs for the Groovy sources
 */

configurations {
    documentation
}

dependencies {
    if (compiledByGradleGroovyVersion(project)) {
        documentation "org.codehaus.groovy:groovy-groovydoc:$GroovySystem.version"
    } else {
        documentation "org.apache.groovy:groovy-groovydoc"
    }
}

ext.grailsDocSrc = project.findProperty('grails-doc.home') ?: project.buildDir.absolutePath + "/checkout/grails-docs-src"

tasks.register("stubs") {
    ext.destinationDir = "$buildDir/docs/stubs"
    doFirst {
        def isolatedAnt = services.get(org.gradle.api.internal.project.IsolatedAntBuilder)
        isolatedAnt.execute {
            mkdir(dir: destinationDir)
            taskdef(name: "generatestubs", classname: "org.codehaus.groovy.grails.cli.GenerateStubsTask") {
                classpath {
                    for(sub in subprojects) {
                        pathelement path: sub.sourceSets.main.compileClasspath.asPath
                    }
                }
            }

            generatestubs(destdir: destinationDir) {
                classpath {
                    for(sub in subprojects) {
                        pathelement path: sub.sourceSets.main.compileClasspath.asPath
                    }
                }
                src {
                    for (sub in subprojects) {
                        sub.sourceSets.main.groovy.srcDirs.each { srcDir ->
                            if (srcDir.exists()) {
                                dirset(dir: srcDir) {
                                    exclude name: "**/*.properties"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

tasks.register('docs') {
    group = 'documentation'
    outputs.dir(project.layout.buildDirectory.dir('docs').get())
}

task javadoc(type:Javadoc, group: 'documentation') {
    def subs = subprojects.findAll { it.name != 'grails-dependencies' && it.name != 'grails-bom' }
    classpath = files(subs.configurations.compileClasspath)
    dependsOn stubs
    maxMemory = '256M'
    destinationDir = project.tasks.findByName('docs/javadoc')
    source subs.sourceSets.main.groovy.srcDirs + stubs.destinationDir
    include "org/codehaus/groovy/grails/**", "grails/**"
    exclude "**/**.groovy"
    project.configure(options) {
        windowTitle = "Grails $grailsVersion"
        docTitle = "<h1>Grails</h1>"
        encoding = "UTF-8"
        memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PACKAGE
        author = true
        version = true
        use = true
        breakIterator = true
        links("https://java.sun.com/j2ee/1.4/docs/api", "https://java.sun.com/j2se/1.5.0/docs/api", "https://static.springframework.org/spring/docs/2.5.x/api")
//        tags("todo:a:To do")  todo fix the javadoc task to accept this option
    }
    verbose = false
}

tasks.register('groovydoc', Groovydoc) {
    final Set<Project> subProjects = subprojects.findAll {
        !(it.name in ['grails-dependencies', 'grails-bom', 'grails-bootstrap', 'grails-gradle-model', 'grails-shell'])
        && !it.name.startsWith("grails-test-suite") }
    def groovydocClasspath = files(configurations.documentation  + subProjects.configurations.compileClasspath)
    // exclude problematic jar file from javadoc classpath
    // http://www.adam-bien.com/roller/abien/entry/trouble_with_crippled_java_ee
    groovydocClasspath -= groovydocClasspath.filter { it.name == 'javaee-web-api-6.0.jar' }
    classpath = groovydocClasspath
    groovyClasspath = groovydocClasspath
    destinationDir = project.layout.buildDirectory.dir('docs/api').get().asFile
    windowTitle = "Grails $grailsVersion"
    docTitle = "Grails $grailsVersion"
    access = GroovydocAccess.PRIVATE
    includeAuthor = true
    includeMainForScripts = false
    processScripts = false

    source subProjects.sourceSets.main.groovy.srcDirs
// Can't make these link methods to work
//    link("http://static.springsource.org/spring/docs/3.0.x/javadoc-api", "org.springframework.")
    doLast {
        delete("${buildDir}/tmp")
    }
}

tasks.register("fetchGrailsDocsSource", FetchGrailsDocSourceTask) {
    checkoutDir = project.layout.buildDirectory.dir("checkout").get()
    grailsDocBranch = "7.0.x"
}

task gdoc(type: GradleBuild, dependsOn: ["groovydoc", "fetchGrailsDocsSource"], group: 'documentation') {
    startParameter.useEmptySettings()
    dir = grailsDocSrc
    tasks = []

    doFirst {
        ext.oldGrailsHome = System.getProperty("grails.home")
        System.setProperty("grails.home", projectDir.absolutePath)
        System.setProperty("disable.groovydocs", "true")
    }

    doLast {
        if (ext.oldGrailsHome) System.setProperty("grails.home", (String) project.oldGrailsHome)
        else System.clearProperty("grails.home")
        System.clearProperty("disable.groovydocs")

        ant.mkdir dir: "${projectDir}/dist"
        copy {
            from "${grailsDocSrc}/build/distributions"
            into "${projectDir}/dist"
        }

        copy {
            from layout.buildDirectory.dir("grails-docs-src/build/docs").get()
            into layout.buildDirectory.dir("docs/api").get()
        }
    }
}

docs.dependsOn gdoc
