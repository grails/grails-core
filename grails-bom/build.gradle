apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {
            pom.withXml {
                def xml = asNode()
                def plugins = new Properties()
                plugins.load(new StringReader(new File("$projectDir/plugins.properties").text))

                def profiles = new Properties()
                profiles.load(new StringReader(new File("$projectDir/profiles.properties").text))

                xml.children().last() + pomInfo
                xml.children().last() + {
                    def mkp = delegate

                    mkp.properties {
                        for (dep in plugins) {
                            String version = dep.value
                            if (!isBuildSnapshot && version.endsWith("-SNAPSHOT")) {
                                throw new RuntimeException("Cannot have a snapshot dependency on a plugin [$dep.key] for a release!")
                            }
                            mkp."${dep.key}.version"(version)
                        }

                        for (dep in dependencyVersions) {
                            String version = dep.value.version
                            if (!isBuildSnapshot && version.endsWith("-SNAPSHOT")) {
                                throw new RuntimeException("Cannot have a snapshot dependency on [$dep.key] for a release!")
                            }
                            mkp."${dep.key}.version"(version)
                        }
                    }

                    mkp.dependencyManagement {
                        mkp.dependencies {
                            for (sub in project.parent.subprojects) {
                                if (sub.name == 'grails-bom') continue

                                mkp.dependency {
                                    mkp.groupId sub.group
                                    mkp.artifactId sub.name
                                    mkp.version sub.version
                                    if (sub.name == 'grails-dependencies') {
                                        mkp.type 'pom'
                                    }

                                    if (sub.name == 'grails-bootstrap') {
                                        mkp.exclusions {
                                            mkp.exclusion {
                                                mkp.groupId 'jline'
                                                mkp.artifactId 'jline'
                                            }
                                            mkp.exclusion {
                                                mkp.groupId 'org.fusesource.jansi'
                                                mkp.artifactId 'jansi'
                                            }
                                            mkp.exclusion {
                                                mkp.groupId 'net.java.dev.jna'
                                                mkp.artifactId 'jna'
                                            }
                                            mkp.exclusion {
                                                mkp.groupId 'org.codehaus.groovy'
                                                mkp.artifactId 'groovy-ant'
                                            }
                                        }
                                    }
                                }
                            }

                            for (dep in dependencyVersions) {
                                def info = dep.value
                                def depList = GroovyCollections
                                        .combinations(info.names, info.modules)
                                        .collect { it.join('-') }
                                        .collect { it.endsWith('-') ? it[0..-2] : it }

                                for (dependency in depList) {
                                    mkp.dependency {
                                        mkp.groupId info.group
                                        mkp.artifactId dependency
                                        mkp.version "\${${dep.key}.version}"
                                    }
                                }
                            }

                            for (plugin in plugins) {
                                String artifactId = plugin.key
                                String version = "\${${plugin.key}.version}"
                                if (artifactId.startsWith("gorm.")) {
                                    artifactId = artifactId.replace("gorm.", "")
                                }
                                mkp.dependency {
                                    mkp.groupId 'org.grails.plugins'
                                    mkp.artifactId artifactId
                                    String versionValue = plugin.value
                                    if (!isBuildSnapshot && versionValue.endsWith("-SNAPSHOT")) {
                                        throw new RuntimeException("Cannot have a snapshot dependency on a plugin [$artifactId] for a release!")
                                    }
                                    mkp.version version
                                }
                            }

                            for (profile in profiles) {
                                mkp.dependency {
                                    mkp.groupId 'org.grails.profiles'
                                    mkp.artifactId profile.key
                                    String version = profile.value
                                    if (!isBuildSnapshot && version.endsWith("-SNAPSHOT")) {
                                        throw new RuntimeException("Cannot have a snapshot dependency on a profile [$profile.key] for a release!")
                                    }
                                    mkp.version(version)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
